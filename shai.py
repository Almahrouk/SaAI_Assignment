# -*- coding: utf-8 -*-
"""Shai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kgk_iZPPnZfu4TDMD4RFuzn7jugWIHfF
"""

# By Eng.Dana Al-Mahrouk

"""# Tasks

1. **Basic Data Exploration**: Identify the number of rows and columns in the dataset, determine the data types of each column, and check for missing values in each column.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


# Load your dataset
df = pd.read_csv('/content/SalariesX.csv')
df.head()

# 1. Basic Data Exploration
num_rows, num_columns = df.shape
data_types = df.dtypes
missing_values = df.isnull().sum()


print("\nData Types:")
print(data_types)
print("\nMissing Values:")
print(missing_values)

"""2. **Descriptive Statistics**: Calculate basic statistics mean, median, mode, minimum, and maximum salary, determine the range of salaries, and find the standard deviation."""

basic_stats = df['TotalPayBenefits'].describe()
salary_range = df['TotalPayBenefits'].max() - df['TotalPayBenefits'].min()
standard_deviation = df['TotalPayBenefits'].std()

print("\nDescriptive Statistics for Salary:")
print(basic_stats)
print("\nSalary Range:", salary_range)
print("Standard Deviation of Salary:", standard_deviation)

"""3. **Data Cleaning**: Handle missing data by suitable method with explain why you use it."""

# 3. Data Cleaning
# Assuming you choose to fill missing values with the mean total pay benefits
df['TotalPayBenefits'].fillna(df['TotalPayBenefits'].mean(), inplace=True)

"""4. **Basic Data Visualization**: Create histograms or bar charts to visualize the distribution of salaries, and use pie charts to represent the proportion of employees in different departments."""

# 4. Basic Data Visualization
plt.figure(figsize=(10, 6))
plt.hist(df['TotalPayBenefits'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Total Pay Benefits')
plt.xlabel('Total Pay Benefits')
plt.ylabel('Frequency')
plt.show()

# Print unique JobTitles without repeating
unique_job_titles = df['JobTitle'].unique()
print(unique_job_titles)

'''
for job_title in unique_job_titles:
    print(job_title)
'''

'''
department_counts = df['JobTitle'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(department_counts, labels=department_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Proportion of Employees in Different Departments')
plt.show()
'''

"""5. **Grouped Analysis**: Group the data by one or more columns and calculate summary statistics for each group, and compare the average salaries across different groups."""

# Group by JobTitle and calculate average TotalPayBenefits
grouped_data = df.groupby('JobTitle')['TotalPayBenefits'].mean()
print(grouped_data)

"""6. **Simple Correlation Analysis**: Identify any correlation between salary and another numerical column, and plot a scatter plot to visualize the relationship.

"""

# Assuming 'Year' is a numerical column
correlation_year_salary = df['TotalPayBenefits'].corr(df['Year'])

# Scatter plot for Salary vs Year
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Year', y='TotalPayBenefits', data=df)
plt.title('Salary vs Year')
plt.xlabel('Year')
plt.ylabel('Salary')
plt.show()

print("Correlation between Salary and Year:", correlation_year_salary)